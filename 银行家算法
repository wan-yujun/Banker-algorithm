#include<stdio.h>
#include<stdlib.h>
#include<conio.h>
// 全局变量定义
int available[100]; //可利用资源向量
int max[50][100];   //最大需求矩阵
int allocation[50][100];  //分配矩阵
int need[50][100];        //需求矩阵
int request[50][100];     //进程P的请求向量，表示第m个进程需要第n类资源的资源量
int finish[50];   // 判断系统是否有足够的资源分配给进程，初始设置为0，分配给进程后，置为1
int p[50];  // 进程向量
int m,n;   //m个进程,n类资源
//安全性算法
int Safe()                      
{
    int i, j, L = 0;
    int Work[100]; //可利用资源向量
    for (i = 0; i < n; i++)
        Work[i] = available[i];
    for (i = 0; i < m; i++)
        finish[i] = 0;
    for (i = 0; i < m; i++)
    {
        if (finish[i] == 1)    // 如果finish为1，代表系统已经给进程Pi分配过了，所以进入下一个进程
            continue;
        else
        {
        // 判断如果进程Pi的n类资源有一个大于系统可分配的n资源，则j ！= n
            for (j = 0; j < n; j++)
            {
                if (need[i][j] > Work[j])
                    break;
            }
            if (j == n)         // 说明系统可分配资源都大于进程Pi所需要的资源
            {
                for(int k = 0; k < n; k++)
                    Work[k] += allocation[i][k];
                finish[i] = 1;
                p[L++] = i;
                i = -1;
            }
            else
                continue;
        }
        if (L == m)             // 已找到安全序列
        {
            printf("\n系统是安全的\n安全系列是:\n");
            for (i = 0; i < L; i++)
            {
                printf("%d", p[i]);
                if (i != L - 1)
                    printf("→");
            }
            printf("\n");
            return 1;
        }
    }
    for (int i = 0; i < m; i++)
    {
        if (finish[i] == 0)
        {
            printf("\n未找到安全序列，该系统是不安全的\n");
            return 0;
        }
    }
}

//银行家算法
int main()
{
    int i, j, number;
    char Flag;   //标志位
    printf("请输入进程的数量:\n");
    scanf("%d", &m);
    printf("请输入资源的种类:\n");
    scanf("%d", &n);
    printf("请输入每个进程最多所需的各类资源数,按照%dx%d矩阵依次输入\n", m, n);
    for (i = 0; i < m; i++)
        for(j = 0; j < n; j++)
            scanf("%d", &max[i][j]);
    printf("请输入每个进程已经分配的各类资源数,按照%dx%d矩阵依次输入\n", m, n);
    for (i = 0; i < m; i++)
    {
        for(j = 0; j < n; j++)
        {
            scanf("%d", &allocation[i][j]);
            need[i][j] = max[i][j] - allocation[i][j];
        }
    }
    printf("请输入各个资源现有的数量:\n");
    for (i = 0; i < n; i++)
        scanf("%d", &available[i]);
    Safe();     // 安全性算法检测
    while (1)
    {
    YH: printf("\n请输入要申请的资源的进程号：（从0开始）\n");
        scanf("%d", &number);
        printf("请输入进程所请求的各个资源的数量\n");
        for (i = 0; i < n; i++)
            scanf("%d", &request[number][i]);
        for (i = 0; i < n; i++)
        {
            if (request[number][i] > need[number][i])
            {
                printf("所请求资源数已超过它所宣布的最大值！请重新输入\n");
                goto YH;
            }
            if (request[number][i] > available[i])
            {
                printf("目前系统尚无足够资源分配给该进程，该进程须等待，请重新输入！\n");
                goto YH;
            }
        }
        for (i = 0; i < n; i++)
        {
            available[i] -= request[number][i];
            allocation[number][i] += request[number][i];
            need[number][i] -= request[number][i];
        }
        if (Safe())
            printf("同意分配请求\n");
        else
        {
            printf("本次试探分配作废，恢复原来的资源分配状态，让申请的进程等待\n");
            for (i = 0; i < n; i++)
            {
                available[i] += request[number][i];
                allocation[number][i] -= request[number][i];
                need[number][i] += request[number][i];
            }
        }
        printf("是否再次请求分配？是请按Y/y，否请按N/n\n");
        while (1)
        {
            Flag = getch();
            if (Flag == 'Y' || Flag == 'y' || Flag == 'N' || Flag == 'n')
                break;
            else 
            {
                printf("你输入有误，请重新输入:\n");
                continue;
            }
        }
        if (Flag == 'Y' || Flag == 'y')
            continue;
        else
            break;
    }
}
